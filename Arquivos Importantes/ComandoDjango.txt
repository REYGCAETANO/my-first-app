my_env\Scripts\activate - Iniciando o ambiente virtual. Obs.: O usuário deve estar dentro do diretório que está o ambiente.
python3 -m pip install --upgrade pip - Instalar ou atualizar o PIP
pip install -r requirements.txt - Instalar o Django.
python manage.py runserver - Iniciar o servidor web
python manage.py startapp nomeAplicação(blog) - Para criar uma aplicação é executar o este comando. Para manter tudo arrumado, é sempre bom criar uma aplicações separadas dentro do nosso projeto.
python manage.py makemigrations nomeAplicação(blog) - Para atualizar as alterações é necessário fazer com que o Django entenda que foram feitas algumas alterações nos modelos
python manage.py migrate - O Django prepara um arquivo de migração depois das alterações feitas na classe e executato o comando acima, que precisasa ser aplicado ao banco de dados
python manage.py createsuperuser - Criar superusuário(admin)
.gitignore.txt - O Git irá controlar as alterações em todos os arquivos e pastas neste diretório, mas existem alguns arquivos que queremos que ele ignore. Fazemos isso através da criação de um arquivo chamado .gitignore no diretório base.
git status - Mostra informações sobre arquivos que não estão sendo controlados, arquivos que foram modificados ou preparados (staged), o status do branch
git add --all - Adicionar todas as alterações.
